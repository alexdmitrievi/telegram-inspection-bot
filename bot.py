import os
import logging
import asyncio
import json
import tempfile
import re
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from docx import Document
from docx.shared import RGBColor

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

(ASKING, CONFIRMING) = range(2)

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∫–µ—Ç—ã
questions = [
    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¢–ù –í–≠–î",
    "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –ø–∞—Ä—Ç–∏–∏ –≤ —Ç–æ–Ω–Ω–∞—Ö",
    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç",
    "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞/—Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É",
    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
    "–í–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–∏–Ω–≤–æ–π—Å –∏ CMR)",
    "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è",
    "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏",
    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
    "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –ø–∏—Å—å–º–∞"
]

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
mapping_keys = [
    "{{TNVED_CODE}}", "{{WEIGHT}}", "{{PLACES}}", "{{CONTRACT_INFO}}",
    "{{SENDER}}", "{{DOCS}}", "{{EXTRA_INFO}}", "{{INSPECTION_DATE}}",
    "{{PRODUCT_NAME}}", "{{DATE}}"
]

profile_path = "user_profile.json"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers'] = []
    context.user_data['step'] = 0
    await update.message.reply_text(questions[0], reply_markup=ReplyKeyboardMarkup(
        [[KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]], resize_keyboard=True))
    return ASKING

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        return await start(update, context)

    step = context.user_data['step']
    answer = validate_input(text, step)
    context.user_data['answers'].append(answer)
    context.user_data['step'] += 1

    if context.user_data['step'] < len(questions):
        await update.message.reply_text(questions[context.user_data['step']])
        return ASKING
    else:
        summary = "\n".join([
            f"{questions[i]}\n‚û° {context.user_data['answers'][i]}"
            for i in range(len(questions))
        ])
        await update.message.reply_text(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{summary}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã? (–¥–∞/–Ω–µ—Ç)")
        return CONFIRMING

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–¥–∞" in text:
        answers = context.user_data['answers']
        save_profile(answers)
        output_files = generate_docs(answers)
        for path in output_files:
            await update.message.reply_document(document=open(path, 'rb'))
        return ConversationHandler.END
    else:
        await update.message.reply_text("–û–∫, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")
        context.user_data['answers'] = []
        context.user_data['step'] = 0
        return ASKING

def validate_input(text, step):
    try:
        if step == 1:  # –º–∞—Å—Å–∞
            return re.sub(r"[^0-9.,]", "", text).replace(",", ".")
        elif step == 2:  # –∫–æ–ª-–≤–æ –º–µ—Å—Ç
            return re.sub(r"\D", "", text)
        elif step in [7, 9]:  # –¥–∞—Ç—ã
            d = re.search(r"\d{1,2}[./-]\d{1,2}[./-]\d{2,4}", text)
            return datetime.strptime(d.group(), "%d.%m.%Y").strftime("%d.%m.%Y") if d else text
        elif step == 4:  # –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
            return text.upper()
        else:
            return text.strip().capitalize()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return text.strip()

def save_profile(answers):
    try:
        with open(profile_path, 'w', encoding='utf-8') as f:
            json.dump({k: v for k, v in zip(mapping_keys, answers)}, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

def generate_docs(answers):
    replacements = dict(zip(mapping_keys, answers))
    template_files = ["–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏.docx", "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–º–æ—Ç—Ä.docx"]
    result_files = []

    for template_path in template_files:
        doc = Document(template_path)
        for para in doc.paragraphs:
            for run in para.runs:
                if run.font.color and run.font.color.rgb == RGBColor(255, 0, 0):
                    for key, val in replacements.items():
                        if key in run.text:
                            run.text = run.text.replace(key, val)
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for para in cell.paragraphs:
                        for run in para.runs:
                            if run.font.color and run.font.color.rgb == RGBColor(255, 0, 0):
                                for key, val in replacements.items():
                                    if key in run.text:
                                        run.text = run.text.replace(key, val)
        output_path = tempfile.mktemp(suffix=".docx")
        doc.save(output_path)
        result_files.append(output_path)

    return result_files

async def run():
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    await app.bot.set_my_commands([BotCommand("start", "–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏")])

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASKING: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question)],
            CONFIRMING: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)]
        },
        fallbacks=[MessageHandler(filters.Regex("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"), start)]
    )

    app.add_handler(conv)

    await app.initialize()
    await app.start()
    await asyncio.Event().wait()

if __name__ == '__main__':
    try:
        asyncio.run(run())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")