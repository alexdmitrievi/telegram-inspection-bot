import os
import logging
import asyncio
import json
import tempfile
import re
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters, CallbackQueryHandler
)
from docx import Document
from docx.shared import RGBColor
import nest_asyncio

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

(ASKING, CONFIRMING) = range(2)
PROFILE_PATH = "user_profile.json"

product_to_tnved = {
    "–ª—É–∫": "0703101900", "–ø–æ–º–∏–¥–æ—Ä": "0702000000", "—Ç–æ–º–∞—Ç": "0702000000",
    "–∫–∞–ø—É—Å—Ç–∞": "0701909000", "–∫–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è": "0704901000", "–æ–≥—É—Ä–µ—Ü": "0707009000",
    "—Ä–µ–¥–∏—Å": "0706109000", "–º–æ—Ä–∫–æ–≤—å": "0706101000", "–ø–µ—Ä–µ—Ü": "0709601000",
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": "0701905000", "–±–∞–∫–ª–∞–∂–∞–Ω": "0709300000", "—Å–≤–µ–∫–ª–∞": "0706109000",
    "–∫—É–∫—É—Ä—É–∑–∞": "0709909000", "–∫–∞–±–∞—á–æ–∫": "0709909000", "–ø–∞—Ç–∏—Å—Å–æ–Ω": "0709909000",
    "—Ñ–∞—Å–æ–ª—å": "0708200000", "—á–µ—Å–Ω–æ–∫": "0703200000", "–∑–µ–ª–µ–Ω—å": "0709990000",
    "—à–ø–∏–Ω–∞—Ç": "0709700000", "–∫–∏–Ω–∑–∞": "0709990000", "—É–∫—Ä–æ–ø": "0709990000",
    "–≤–∏–Ω–æ–≥—Ä–∞–¥": "0806101000", "—á–µ—Ä–µ—à–Ω—è": "0809201000", "–≤–∏—à–Ω—è": "0809290000",
    "–¥—ã–Ω—è": "0807190000", "–∞—Ä–±—É–∑": "0807110000", "—è–±–ª–æ–∫–æ": "0808108000",
    "–≥—Ä—É—à–∞": "0808209000", "–∞–π–≤–∞": "0808400000", "—Å–ª–∏–≤–∞": "0809400000",
    "–∞–±—Ä–∏–∫–æ—Å": "0809100000", "–ø–µ—Ä—Å–∏–∫": "0809300000", "–∏–Ω–∂–∏—Ä": "0804200000",
    "—Ö—É—Ä–º–∞": "0810907500", "–ª–∏–º–æ–Ω": "0805500000", "–º–∞–Ω–¥–∞—Ä–∏–Ω—ã": "0805201000"
}

questions = [
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
    "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –ø–∞—Ä—Ç–∏–∏ –≤ —Ç–æ–Ω–Ω–∞—Ö",
    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç",
    "–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ",
    "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞/—Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è",
    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
    "–í–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–∏–Ω–≤–æ–π—Å –∏ CMR)",
    "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è",
    "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –ø–∏—Å—å–º–∞ –∏ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏"
]

mapping_keys = [
    "{{TNVED_CODE}}", "{{WEIGHT}}", "{{PLACES}}", "{{VEHICLE}}", "{{CONTRACT_INFO}}",
    "{{SENDER}}", "{{DOCS}}", "{{EXTRA_INFO}}", "{{DATE}}", "{{PRODUCT_NAME}}"
]

def reorder_answers(raw_answers):
    return [
        raw_answers[0],   # TNVED_CODE
        raw_answers[2],   # WEIGHT
        raw_answers[3],   # PLACES
        raw_answers[4],   # VEHICLE
        raw_answers[5],   # CONTRACT_INFO
        raw_answers[6],   # SENDER
        raw_answers[7],   # DOCS
        raw_answers[8],   # EXTRA_INFO
        raw_answers[9],   # DATE
        raw_answers[1],   # PRODUCT_NAME
    ]

async def log_all_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['answers'] = []
    context.user_data['step'] = 0

    if os.path.exists(PROFILE_PATH):
        with open(PROFILE_PATH, 'r', encoding='utf-8') as f:
            context.user_data['cached'] = json.load(f)
        await update.message.reply_text(
            "üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏?",
            reply_markup=ReplyKeyboardMarkup([["‚úÖ –î–∞", "‚úè –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"]], resize_keyboard=True)
        )
        return CONFIRMING
    else:
        return await prompt_product_choice(update, context)

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–¥–∞" in text:
        if context.user_data.get("cached"):
            answers = list(context.user_data["cached"].values())
        else:
            answers = context.user_data["answers"]

        reordered = reorder_answers(answers)
        save_profile(reordered)
        output_files = generate_docs(reordered)
        for path in output_files:
            await update.message.reply_document(document=open(path, "rb"))
        return ConversationHandler.END

    await update.message.reply_text("–û–∫, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.")
    return await start(update, context)

async def prompt_product_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(name.capitalize(), callback_data=name)]
        for name in list(product_to_tnved.keys())[:10]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASKING

async def handle_inline_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await process_step(query.message, context, query.data)

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text.lower().strip() == "üîÑ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        return await start(update, context)
    return await process_step(update.message, context, text)

async def process_step(msg, context, text):
    step = context.user_data['step']
    answers = context.user_data['answers']

    if step == 0:
        product_name = text.strip()
        tnved_code = detect_tnved_code(product_name)
        answers.append(tnved_code)
        answers.append(product_name)
    else:
        answers.append(validate_input(text, step))

    context.user_data['step'] += 1

    if context.user_data['step'] < len(questions):
        await msg.reply_text(
            questions[context.user_data['step']],
            reply_markup=ReplyKeyboardMarkup([["\ud83d\udd04 –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"]], resize_keyboard=True)
        )
        return ASKING
    else:
        reordered = reorder_answers(answers)
        save_profile(reordered)
        summary = "\n".join([
            f"{questions[i]}\n\u27a1 {answers[i+1 if i == 0 else i]}"
            for i in range(len(questions))
        ])
        await msg.reply_text(
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{summary}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã? (–¥–∞/–Ω–µ—Ç)",
            reply_markup=ReplyKeyboardMarkup([["\ud83d\udd04 –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"]], resize_keyboard=True)
        )
        return CONFIRMING

def detect_tnved_code(name):
    name = name.lower()
    for keyword, code in product_to_tnved.items():
        if keyword in name:
            return code
    return "0808108000"

def validate_input(text, step):
    try:
        if step == 1:
            return re.sub(r"[^0-9.,]", "", text).replace(",", ".")
        elif step == 2:
            return re.sub(r"\D", "", text)
        elif step == 8:
            d = re.search(r"\d{1,2}[./-]\d{1,2}[./-]\d{2,4}", text)
            return datetime.strptime(d.group(), "%d.%m.%Y").strftime("%d.%m.%Y") if d else text
        elif step == 5:
            return text.upper()
        else:
            return text.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return text.strip()

def save_profile(answers):
    try:
        with open(PROFILE_PATH, 'w', encoding='utf-8') as f:
            json.dump(dict(zip(mapping_keys, answers)), f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

def generate_docs(answers):
    replacements = dict(zip(mapping_keys, answers))
    result_files = []
    for template_path in ["–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏.docx", "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–º–æ—Ç—Ä.docx"]:
        doc = Document(template_path)
        for para in doc.paragraphs:
            for run in para.runs:
                if run.font.color and run.font.color.rgb == RGBColor(255, 0, 0):
                    for key, val in replacements.items():
                        if key in run.text:
                            run.text = run.text.replace(key, val)
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for para in cell.paragraphs:
                        for run in para.runs:
                            if run.font.color and run.font.color.rgb == RGBColor(255, 0, 0):
                                for key, val in replacements.items():
                                    if key in run.text:
                                        run.text = run.text.replace(key, val)
        output_path = tempfile.mktemp(suffix=".docx")
        doc.save(output_path)
        result_files.append(output_path)
    return result_files

async def run():
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASKING: [
                CallbackQueryHandler(handle_inline_selection),
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question)
            ],
            CONFIRMING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("\ud83d\udd04 –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"), start)],
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("restart", start))
    app.add_handler(MessageHandler(filters.ALL, log_all_updates))

    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"),
        BotCommand("restart", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])
    await app.run_polling()

if __name__ == '__main__':
    try:
        nest_asyncio.apply()
        asyncio.get_event_loop().run_until_complete(run())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
